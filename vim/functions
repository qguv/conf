" vim:syn=vim
" vim custom functions

" Window/Tab Operation Functions
function MoveToPrevTab()
  "there is only one window
  if tabpagenr('$') == 1 && winnr('$') == 1
    return
  endif
  "preparing new window
  let l:tab_nr = tabpagenr('$')
  let l:cur_buf = bufnr('%')
  if tabpagenr() != 1
    close!
    if l:tab_nr == tabpagenr('$')
      tabprev
    endif
    sp
  else
    close!
    exe "0tabnew"
  endif
  "opening current buffer in new window
  exe "b".l:cur_buf
endfunc
function MoveToNextTab()
  "there is only one window
  if tabpagenr('$') == 1 && winnr('$') == 1
    return
  endif
  "preparing new window
  let l:tab_nr = tabpagenr('$')
  let l:cur_buf = bufnr('%')
  if tabpagenr() < tab_nr
    close!
    if l:tab_nr == tabpagenr('$')
      tabnext
    endif
    sp
  else
    close!
    tabnew
  endif
  "opening current buffer in new window
  exe "b".l:cur_buf
endfunc

function CharIsUppercase(charnum)
  "65: A, 90: Z
  return a:charnum >= 65 && a:charnum <= 90
endfunc

function CharIsLowercase(charnum)
  "97: a, 122: z
  return a:charnum >= 97 && a:charnum <= 122
endfunc

function CharIsLetter(charnum)
  return CharIsLowercase(a:charnum) || CharIsUppercase(a:charnum)
endfunc

function CharCapitalize(charnum)
  if CharIsLowercase(a:charnum)
    "97: a, 65: A
    return a:charnum + (65 - 97)
  else
    return a:charnum
  endif
endfunc


" Fancy variable substitution
" mode is underscore for underscore mode or space for camelcase mode
function VariableMangler(mode)

  echo "-- variable --"
  let l:variable = ""
  let l:inchar = getchar()

  "13: CR
  "32: SPACE

  while (CharIsLetter(l:inchar) || l:inchar == 32 || l:inchar is# "\<BS>")

    " we entered a space: handle it
    if (l:inchar == 32)

      " we're in underscore mode
      if (a:mode is "_")

        " there was no first space; append an underscore and move on
        if (matchstr(l:variable, "\_$") == "")
          let l:variable = l:variable . "_"

        " we've entered a second space; return the whole thing
        else
          return l:variable . " "
        endif

      " we're in camelCase mode, wait for the next character
      else
        echo "var: " . l:variable . "^"
        let l:inchar = getchar()

        " we've entered a second space; return the whole thing
        if (l:inchar == 32)
          return l:variable . " "

        " we've entered a new variable name
        else
          let l:variable = l:variable . nr2char(CharCapitalize(l:inchar))
        endif

      endif

    " we entered a backspace
    elseif (l:inchar is# "\<BS>")

      if (l:variable is "")
      " nothing to delete
        return ""
      else
        let l:variable = substitute(l:variable, '\(.*\).$', '\1', 'g')
      endif

    " we entered a normal character
    else
      let l:variable = l:variable . nr2char(l:inchar)
    endif

    echo "var: " . l:variable
    let l:inchar = getchar()
  endwhile

  " ended with a symbol
  let l:variable = l:variable . nr2char(l:inchar)
  
  return l:variable
endfunc 
