#!/bin/bash
# shell custom functions

# Use system-specific variables
source "$XDG_CONFIG_HOME/bash/system"

# Combines mkdir, cd, pwd
function md () {
  mkdir -p "$@" &&
  eval cd "\"\$$#\"" &&
  eval echo "Switching to $(pwd)...";
}

# Quickly edit programs in your $PATH
function editex () {
  eval "$EDITOR" "$(which $1)" ${@:2}
}

# Run a locally hosted godoc.org at given port
function hostgodoc () {
  if [ -z $1 ]; then
    PORT="6060"
  else
    PORT="$1"
  fi
  eval "godoc" "-http=:$PORT"
}

function texide () {
  if [ "$1" = "--help" ] || [ "$1" = "-h" ]; then
    echo "Usage:"
    echo "  texide <project-name>"
    echo
    echo "texide will open and render LaTeX projects on the fly in vim, rendering and"
    echo "displaying text each time vim is closed. Use :cq in vim to stop rendering."
    echo
    echo "Do not include an extension on <project-name>. We'll figure it out."
    return 0
  fi

  INFILE="$1"
  TEXFILE="$INFILE.tex"
  DVIFILE="$INFILE.dvi"
  PDFFILE="$INFILE.pdf"

  STATUS=0
  while [ $STATUS -eq 0 ]; do
    vim "$TEXFILE" -c "normal! g\`\""
    let STATUS=$?
    "latex" "$INFILE"
    "bibtex" "$INFILE"
    "latex" "$INFILE"
    "latex" "$INFILE"
    "dvipdf" "$DVIFILE"
    "$OPENCOMMAND" "$PDFFILE"
  done

  return 0
}

function movetotrash() {

  # Filenames will be append with a timestamp
  timestamp=$(date "+%s")

  # You can define your own if you want, but NO TRAILING SLASH
  TRASHDIR="$HOME/.trash"

  if [[ -z "$*" ]] ; then
    echo "Usage: mt [files...]"
    return 2
  fi

  # Test if TRASHDIR exists and proceed with deleting files if it
  # exists. If it does not exist, e.g. after a restart, create the
  # directory and proceed.
  if [ ! -d "$TRASHDIR" ]; then
    mkdir "$TRASHDIR"

    # if unsuccessful, crash
    [ "$?" -eq 0 ] || return 3

    touch "$TRASHDIR/sources"
    echo "$TRASHDIR initialized"
  fi

  # TBD: Do not move every file separately, but
  # mv all files at once... don't know how...
  while [ $# -ne 0 ]; do

    # Scrub input for parts
    filename="$(basename $1)"

    # Make whitespaces underscores
    filename="$(echo $filename | sed 's:\s:_:g')"

    # Append timestamp and combine
    filename="${filename}_$timestamp.tar.xz"
    dest="$TRASHDIR/$filename"

    # Move files to /tmp/trash
    tar cJf "$dest" "$1"
    [ "$?" -eq 0 ] || return 1
    rm -rf "$1"
    echo "$dest"
    echo "$filename:\t$(pwd)/$1" >> "$TRASHDIR/sources"

    shift
  done

  return 0
}

# Push to all remotes in git
function git-push-all () {
  for r in $(git remote); do
    git push "$r" "$@"
  done
}

function git-diff-words() {
  git diff --color-words "$@" | fold -s -w "$(stty size | cut -d ' ' -f 2)" | less -R
  return "$?"
}

function git-show-words() {
  git show --color-words "$@" | fold -s -w "$(stty size | cut -d ' ' -f 2)" | less -R
  return "$?"
}

function git-bb-remote() {
  usage="Usage: git bb-remote [-n GIT_REMOTE_NAME] [-u USERNAME] [-o OWNER] [-r REPOSITORY]"

  if [ "$1" = "--help" ]; then
    echo "$usage"
    return 0

  # odd amount of arguments
  elif [ $(( $# % 2 )) -ne 0 ]; then
    echo "$usage"
    return 2
  fi

  remote="origin"
  bbuser="$(whoami)"
  owner="$(whoami)"
  repo="$(basename $(pwd))"

  while (($#)); do
    case "$1" in
      "-n")
        remote="$2"
        ;;
      "-u")
        bbuser="$2"
        ;;
      "-o")
        owner="$2"
        ;;
      "-r")
        repo="$2"
        ;;
      *)
        echo "$usage"
        return 1
    esac
    shift; shift
  done

  git remote add "$remote" "https://${bbuser}@bitbucket.org/${owner}/${repo}"
}

# list git subtrees https://stackoverflow.com/questions/16641057/how-can-i-list-the-git-subtrees-on-the-root#18339297
function git-sub-list() {
   git log | grep git-subtree-dir | tr -d ' ' | cut -d ':' -f2 | sort | uniq | xargs -I {} bash -c 'if [ -d $(git rev-parse --show-toplevel)/{} ] ; then echo {}; fi'
}

function shreddir() {
  while [ $# -ne 0 ]; do
    read -q "ok?Shredding \"$1\" and children, okay? [y/N] "
    echo

    # Y or y end up 'y' with zsh's `read -q`
    if [ "$ok" != "y" ]; then
      echo "Didn't remove $1!"
      return 301
    fi

    find "$1" -type f -execdir shred -fuz '{}' \;

    if [ $? -ne 0 ]; then
      return "$?"
    fi

    rm -rf "$1"

    shift
  done

  return 0
}

function promptloop() {
  if [ -z "$1" ]; then
    echo "promptloop <command>"
    echo "  Run <command> over and over again, asking each time whether to continue."
    return 2
  fi

  while true; do
    "$1"
    laststatus="$?"
    echo -n "\nContinue? [y/N] "
    read -q || break
  done

  echo
  return laststatus
}

function docker-clean() {
  echo "\nRemoving dangling images..."
  docker rmi -f $(docker images -qf 'dangling=true')
  echo "\nRemoving exited containers..."
  docker rm $(docker ps -aq --filter 'status=exited') > /dev/null 2>&1 || echo "No exited containers.\n"
  echo "\nRemoving stale containers..."
  docker rm $(docker ps -aq) > /dev/null 2>&1 || echo "No stale containers.\n"
  echo "\nRemoving intermediate images..."
  docker rmi -f $(docker images -a | grep '<none>' | awk '{print $3}')
  echo "\nAll clean."
}

function chase() {
  mv "$@"
  for lastarg in $@; do :; done
  cd "$lastarg"
}

function somafm() {
  killall mpg123 > /dev/null 2>&1
  if [ "$1" = "stop" ]; then
    return
  fi
  mpg123 -@ "http://somafm.com/startstream=$1.pls" > /dev/null 2>&1 &
}

# remove spaces, then run unquoted lines through fmt, passing arguments along
function mailfmt() {
  eval "sed 's/^>/.>/g' | fmt $@ | sed 's/^.>/>/g' | sed 's/   */ /g'"
}

function osxdocker() {
  docker-machine env default > /dev/null 2>&1
  if [ $? -ne 0 ]; then
    docker-machine create --driver virtualbox default || docker-machine start default
  fi
  eval $(docker-machine env default)
  eval "\\docker $@"
}

function yesno() {
    echo -n "$@ [y/N]"
    old_stty_cfg=$(stty -g)
    stty raw -echo ; answer=$(head -c 1) ; stty $old_stty_cfg # Care playing with stty
    if echo "$answer" | grep -iq "^y" ;then
        return 0
    fi
    return 1
}

function gpg_clean() {
    # Clean up the GPG Keyring.  Keep it tidy.
    # blog.lavall.ee
    echo "Cleaning up the GPG keyring..."

    for expiredKey in $(gpg2 --list-keys | awk '/^pub.* \[expired\: / {id=$2; sub(/^.*\//, "", id); print id}' | fmt -w 999 ); do
        echo
        echo "Found an expired key:"
        echo
        gpg2 --list-key "$expiredKey"
        yesno "Delete it?"
        if [ $? -eq 1 ]; then
            echo " won't delete"
            continue
        fi
        gpg2 --delete-keys "$expiredKey" #batch quiet bitbucket
        if [ $? -eq 0 ]; then
            echo " deleted"
        else
            echo " failed to delete"
            exit 1
        fi
    done

    echo
    echo Verifying key integrity:
    for keyid in $(gpg -k | grep ^pub | grep -v expired: | grep -v revoked: | cut -d/ -f2 | cut -d' ' -f1); do
        echo -n "  $keyid"
        gpg2 --batch --quiet --edit-key $keyid check clean cross-certify save quit > /dev/null 2>&1
        if [ $? -eq 0 ]; then
            echo " OK"
        else
            echo " FAIL"
        fi
    done

    echo
    echo Updating keys...
    gpg2 --refresh-keys
}

function disable_powersave() {
  xset -dpms
  xset s off
}

function enable_powersave() {
  xset +dpms
  xset s on
}

function aur() {
  for v in "$@"; do
    git clone git+ssh://aur@aur.archlinux.org/${v}.git
  done
}

function cslp() {
  ssh_remote="csci"
  remote_dir="/tmp/cslp"

  ssh "$ssh_remote" rm -rf "$remote_dir"
  ssh "$ssh_remote" mkdir  "$remote_dir"

  for local_file in "$@"; do
    remote_file="$remote_dir/$(basename $local_file)"
    scp "$local_file" "$ssh_remote:$remote_file"
    ssh -X "$ssh_remote" "okular --print $remote_file > /dev/null 2>&1"
  done
}

function rchars() {
  if [ -z "$1" ]; then
    echo "printable NUMBER"
    echo "  Spits out some printable characters to the terminal."
    return 2
  fi
  tr -dc "[:graph:]" < /dev/urandom | head -c"$1"
}

function genpasswd() {
  L="$1"
  if [[ "$L" == "" ]]; then
    L=16
  fi
  tr -dc A-Za-z0-9_ < /dev/urandom | head -c "$L" | xargs
}

function gist-edit() {
  mkdir -p /tmp/gist-edit
  TMPFILE="/tmp/gist-edit/$(openssl rand -hex 16)"
  HDRMSG="=== USE :cq TO EXIT WITHOUT UPLOADING ==="
  echo "$HDRMSG" > "$TMPFILE" &&
  gist -f todo.txt -r "$DSTODO" >> "$TMPFILE" &&
  eval "$EDITOR $TMPFILE" &&
  grep -xv "$HDRMSG" "$TMPFILE" | gist -f todo.txt -u "$DSTODO"
  rm -rf /tmp/gist-edit
}

function fingerprint () {
	openssl s_client -connect "$1" < /dev/null 2>/dev/null | openssl x509 -fingerprint -sha1 -noout -in /dev/stdin | tr -d : | cut -d= -f2 | tr 'A-F' 'a-f'
}

udevinfo() {
	udevadm info -a -p "$(udevadm info -q path -n $1)"
}

function update-config-subtrees() {
    cd "$XDG_CONFIG_HOME"
    git sub-update https://github.com/zsh-users/zsh-syntax-highlighting zsh/plugins/zsh-syntax-highlighting
    git sub-update https://github.com/zsh-users/zsh-autosuggestions zsh/plugins/zsh-autosuggestions
    git sub-update https://github.com/weechat/scripts weechat/plugins
    git sub-update https://github.com/junegunn/vim-plug nvim/vim-plug
    git sub-update https://github.com/VundleVim/Vundle.vim vim/vundle
    git sub-update https://github.com/wee-slack/wee-slack weechat/community/wee-slack
}

eag () {
  eval "$EDITOR '+:Ack $@'"
}

function pretend_usa () {
  export LANG=en_US.UTF-8
  export LC_CTYPE="en_US.UTF-8"
  export LC_NUMERIC=en_US.UTF-8
  export LC_TIME=en_US.UTF-8
  export LC_COLLATE="en_US.UTF-8"
  export LC_MONETARY=en_US.UTF-8
  export LC_MESSAGES="en_US.UTF-8"
  export LC_PAPER=en_US.UTF-8
  export LC_NAME="en_US.UTF-8"
  export LC_ADDRESS="en_US.UTF-8"
  export LC_TELEPHONE="en_US.UTF-8"
  export LC_MEASUREMENT=en_US.UTF-8
  export LC_IDENTIFICATION="en_US.UTF-8"
}

function gotify() {
  if [ -z "$*" ]; then
    return 0
  fi

  curl -sX POST "https://push.guvernator.net/message?token=${GOTIFY_TOKEN}" -F "title=$(cat /etc/hostname)" -F "priority=8" -F "message=$*"
  curl_status=$?
  printf '\n'
  return $curl_status
}

# prefix a command with `report` and a report will be pushed to Gotify when the
# command completes if it takes more than three seconds
function report() {

  if [ -z "${GOTIFY_TOKEN}" ]; then
    printf "No \$GOTIFY_TOKEN configured! Not running the command!\n"
    return 1
  fi

  # get start time
  t1=$(date -u +%s)

  # run the command
  $@
  cmd_status=$?

  # send if the command was slower than 2 seconds
  t2=$(date -u +%s)
  let "dt = t2 - t1"
  if [ $dt -lt 3 ]; then
    return
  fi

  # generate a message based on the command's exit status
  cmd_name="$1"
  if [ "$cmd_name" = "sudo" ]; then
    cmd_name="$2"
  fi

  if [ $cmd_status -eq 0 ]; then
    msg="${cmd_name} completed ok"
  else
    msg="${cmd_name} failed with status $?"
  fi

  # send a message to Gotify
  gotify "${msg}"
  if [ $? -eq 0 ]; then
    printf "Command took ${dt} seconds. Report pushed!\n"
  else
    printf "Report failed to send to gotify (curl status $?)! Command took ${dt} seconds.\n"
    return 1
  fi
}

beginswith() {
  case $2 in "$1"*) true;; *) false;; esac;
}

giti() {(
  while
    printf '> git '
    read line
  do

    # some commands are treated as non-git commands
    if beginswith 'cd ' "$line " || beginswith 'ls ' "$line " || beginswith 'mkdir ' "$line "; then
      printf "\033[1A\033[2K> $line\n"
      eval "$line"

    # exit is an alias for ctrl-d
    elif [ 'exit' = "$line" ]; then
      break

    # most commands become git commands
    else
      eval "git $line"
    fi
  done

  # ctrl-d triggers an "exit"
  printf "\033[2K\r> exit\n"
)}

function spectrogram() {
  [ $# -ne 2 ] && printf "Usage: $0 <mp3 input file> <mp4 output file>\n" && return 1

  ffmpeg -i "$1" -filter_complex \
    "[0:a]showspectrum=s=854x480:mode=combined:slide=scroll:saturation=0.2:scale=log,format=yuv420p[v]" \
    -map "[v]" -map 0:a \
    -b:v 700k -b:a 360k "$2"
}

function vectorscope() {
  [ $# -ne 2 ] && printf "Usage: $0 <mp3 input file> <mp4 output file>\n" && return 1

  ffmpeg -i "$1" -filter_complex \
    "[0:a]avectorscope=s=480x480:zoom=1.5:rc=200:gc=200:bc=200:rf=40:gf=40:bf=40,format=yuv420p[v]; \
    [v]pad=854:480:187:0[out]" \
    -map "[out]" -map 0:a \
    -b:v 700k -b:a 360k "$2"
}

function wave_line() {
  [ $# -ne 2 ] && printf "Usage: $0 <mp3 input file> <mp4 output file>\n" && return 1

  ffmpeg -i "$1" -filter_complex \
    "[0:a]showwaves=mode=point:s=hd480:colors=White[v]" \
    -map "[v]" -map 0:a -pix_fmt yuv420p \
    -b:a 360k -r:a 44100 "$2"
}

function wave_filled() {
  [ $# -ne 2 ] && printf "Usage: $0 <mp3 input file> <mp4 output file>\n" && return 1

  ffmpeg -i "$1" -filter_complex \
    "[0:a]showwaves=mode=cline:s=hd480:colors=White[v]" \
    -map "[v]" -map 0:a -pix_fmt yuv420p \
    -b:a 360k -r:a 44100 "$2"
}

function blank() {
  [ $# -ne 2 ] && printf "Usage: $0 <mp3 input file> <mp4 output file>\n" && return 1

  ffmpeg -i "$1" -filter_complex \
    "color=c=black:s=hd480:r=1[v]" \
    -map "[v]" -map 0:a -pix_fmt yuv420p \
    -b:a 360k -r:a 44100 -shortest "$2"
}

