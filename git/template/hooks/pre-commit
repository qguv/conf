#!/bin/sh
#
# An example hook script to verify what is about to be committed.
# Called by "git commit" with no arguments.  The hook should
# exit with non-zero status after issuing an appropriate message if
# it wants to stop the commit.
#
# To enable this hook, rename this file to "pre-commit".


if git rev-parse --verify HEAD >/dev/null 2>&1
then
	against=HEAD
else
	# Initial commit: diff against an empty tree object
	against=4b825dc642cb6eb9a060e54bf8d69288fbee4904
fi

# Redirect output to stderr.
exec 1>&2

runTests=$(git config --bool hooks.tests.run)
if [ "$runTests" != "true" ]; then
	exit 0
fi

# Run tests
testCommand=$(git config --get-all hooks.tests.command)
if [ "$testCommand" == "" ]; then
	testCommand="make test"
fi
echo "Running unit tests...\n"
$testCommand

# reject the commit in case of failures
if [[ $? != 0 ]]; then
	cat <<-ohce

Unit tests have failures. Commit rejected.

You can disable the unit-test check just this once with:
  git commit --no-verify

You can disable it forever with:
  git config hooks.tests.run false

You can change the command it runs ("make test" by default) with:
  git config hooks.tests.command "new test command"
	ohce
	exit 1
fi

echo

# If there are whitespace errors, print the offending file names and fail.
exec git diff-index --check --cached $against --
