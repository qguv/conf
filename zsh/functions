#!/usr/bin/zsh
# zsh custom functions

# Use system-specific variables
source $XDG_CONFIG_HOME/zsh/system

# Combines mkdir, cd, pwd
function mkdircd () {

  mkdir -p "$@" &&
  eval cd "\"\$$#\"" &&
  eval echo "Switching to $(pwd)...";

}


# Quickly edit programs in your $PATH
function editex () {
  eval "$EDITOR" "$(which $1)" ${@:2}
}


# Run a locally hosted godoc.org at given port
function hostgodoc () {

  if [ -z $1 ]; then
    PORT="6060"
  else
    PORT="$1"
  fi

  eval "godoc" "-http=:$PORT"

}


# Push to all remotes in git
function git-push-all () {
  for r in $(git remote); do
    git push "$r" "$@"
  done
}

function texide () {
  if [ "$1" = "--help" ] || [ "$1" = "-h" ]; then
    echo "Usage:"
    echo "  texide <project-name>"
    echo
    echo "texide will open and render LaTeX projects on the fly in vim, rendering and"
    echo "displaying text each time vim is closed. Use :cq in vim to stop rendering."
    echo
    echo "Do not include an extension on <project-name>. We'll figure it out."
    return 0
  fi

  INFILE="$1"
  TEXFILE="$INFILE.tex"
  DVIFILE="$INFILE.dvi"
  PDFFILE="$INFILE.pdf"

  STATUS=0
  while [ $STATUS -eq 0 ]; do
    vim "$TEXFILE" -c "normal! g\`\""
    let STATUS=$?
    "latex" "$INFILE"
    "bibtex" "$INFILE"
    "latex" "$INFILE"
    "latex" "$INFILE"
    "dvipdf" "$DVIFILE"
    "$OPENCOMMAND" "$PDFFILE"
  done

  return 0
}

function movetotrash() {

  # Filenames will be append with a timestamp
  timestamp=$(date "+%s")

  # You can define your own if you want, but NO TRAILING SLASH
  TRASHDIR="$HOME/.trash"

  if [[ -z "$*" ]] ; then
    echo "Usage: mt [files...]"
    return 2
  fi

  # Test if TRASHDIR exists and proceed with deleting files if it
  # exists. If it does not exist, e.g. after a restart, create the
  # directory and proceed.
  if [ ! -d "$TRASHDIR" ]; then
    mkdir "$TRASHDIR"

    # if unsuccessful, crash
    [ "$?" -eq 0 ] || return 3

    touch "$TRASHDIR/sources"
    echo "$TRASHDIR initialized"
  fi

  # TBD: Do not move every file separately, but
  # mv all files at once... don't know how...
  while [ $# -ne 0 ]; do

    # Scrub input for parts
    filename="$(basename $1)"

    # Make whitespaces underscores
    filename="$(echo $filename | sed 's:\s:_:g')"

    # Append timestamp and combine
    filename="${filename}_$timestamp.tar.xz"
    dest="$TRASHDIR/$filename"

    # Move files to /tmp/trash
    tar cJf "$dest" "$1"
    [ "$?" -eq 0 ] || return 1
    rm -rf "$1"
    echo "$dest"
    echo "$filename:\t$(pwd)/$1" >> "$TRASHDIR/sources"

    shift
  done

  return 0
}

function git-diff-words() {
  git diff --color-words "$@" | fold -s -w "$(stty size | cut -d ' ' -f 2)" | less -R
  return $?
}

function git-show-words() {
  git show --color-words "$@" | fold -s -w "$(stty size | cut -d ' ' -f 2)" | less -R
  return $?
}

function shreddir() {
  while [ $# -ne 0 ]; do
    read -q "ok?Shredding \"$1\" and children, okay? [y/N] "
    echo

    # Y or y end up 'y' with zsh's `read -q`
    if [ "$ok" != "y" ]; then
      echo "Didn't remove $1!"
      return 301
    fi

    find "$1" -type f -execdir shred -fuz '{}' \;

    if [ $? -ne 0 ]; then
      return $?
    fi

    rm -rf "$1"

    shift
  done

  return 0
}

function promptloop() {
  if [ -z "$1" ]; then
    echo "promptloop <command>"
    echo "  Run <command> over and over again, asking each time whether to continue."
    return 2
  fi

  while true; do
    "$1"
    laststatus="$?"
    echo -n "\nContinue? [y/N] "
    read -q || break
  done

  echo
  return laststatus
}
